#use "tag-parser.ml";;

type case = {name: string; input: sexpr; expected: expr};;

let cases = [

{name = "RON_CONVERTED_TEST_1"; input = ScmPair (ScmSymbol "let", ScmPair (ScmPair (ScmPair (ScmSymbol "x", ScmPair (ScmNumber (ScmRational(42,1)), ScmNil)), ScmPair (ScmPair (ScmSymbol "y", ScmPair (ScmNumber (ScmRational(42,1)), ScmNil)), ScmNil)), ScmPair (ScmSymbol "y", ScmNil))); expected = ScmApplic (ScmLambdaSimple (["x"; "y"], ScmVar "y"),[ScmConst (ScmNumber (ScmRational(42,1))); ScmConst (ScmNumber (ScmRational(42,1)))])};

{name = "RON_CONVERTED_TEST_2"; input = ScmPair (ScmSymbol "let", ScmPair (ScmNil, ScmPair (ScmNumber (ScmRational(72,1)), ScmNil))); expected = ScmApplic (ScmLambdaSimple ([], ScmConst (ScmNumber (ScmRational(72,1)))), [])};

{name = "RON_CONVERTED_TEST_3"; input = ScmPair (ScmSymbol "let", ScmPair (ScmPair (ScmPair (ScmSymbol "x", ScmPair (ScmNumber (ScmRational(73,1)), ScmNil)), ScmNil), ScmPair (ScmSymbol "x", ScmNil))); expected = ScmApplic (ScmLambdaSimple (["x"], ScmVar "x"), [ScmConst (ScmNumber (ScmRational(73,1)))])};

{name = "RON_CONVERTED_TEST_4"; input = ScmPair (ScmSymbol "let", ScmPair (ScmNil, ScmPair (ScmPair (ScmSymbol "begin", ScmPair (ScmNumber (ScmRational(94,1)), ScmPair (ScmNumber (ScmRational(94,1)), ScmPair (ScmNumber (ScmRational(94,1)), ScmNil)))), ScmNil))); expected = ScmApplic(ScmLambdaSimple ([],ScmSeq[ScmConst (ScmNumber (ScmRational(94,1))); ScmConst (ScmNumber (ScmRational(94,1)));ScmConst (ScmNumber (ScmRational(94,1)))]),[])};

{name = "RON_CONVERTED_TEST_5"; input = ScmPair (ScmSymbol "let", ScmPair (ScmPair (ScmPair (ScmSymbol "a", ScmPair (ScmNumber (ScmRational(116,1)), ScmNil)), ScmPair (ScmPair (ScmSymbol "b", ScmPair (ScmNumber (ScmRational(116,1)), ScmNil)), ScmNil)), ScmPair (ScmPair (ScmSymbol "+", ScmPair (ScmSymbol "a", ScmPair (ScmSymbol "b", ScmNil))), ScmNil))); expected = ScmApplic (ScmLambdaSimple (["a"; "b"], ScmApplic (ScmVar "+", [ScmVar "a"; ScmVar "b"])),[ScmConst (ScmNumber (ScmRational(116,1))); ScmConst (ScmNumber (ScmRational(116,1)))])};

{name = "RON_CONVERTED_TEST_6"; input = ScmPair (ScmSymbol "let", ScmPair (ScmPair (ScmPair (ScmSymbol "x", ScmPair (ScmChar 'x', ScmNil)), ScmNil), ScmPair (ScmSymbol "x", ScmNil))); expected = ScmApplic (ScmLambdaSimple (["x"], ScmVar "x"), [ScmConst (ScmChar 'x')])};

{name = "RON_CONVERTED_TEST_7"; input = ScmPair (ScmSymbol "let", ScmPair (ScmPair (ScmPair (ScmSymbol "t", ScmPair (ScmBoolean true, ScmNil)), ScmPair (ScmPair (ScmSymbol "th", ScmPair (ScmNumber (ScmRational(36,1)), ScmNil)), ScmPair (ScmPair (ScmSymbol "el", ScmPair (ScmNumber (ScmRational(36,1)), ScmNil)), ScmNil))), ScmPair (ScmPair (ScmSymbol "if", ScmPair (ScmSymbol "t", ScmPair (ScmSymbol "th", ScmPair (ScmSymbol "el", ScmNil)))), ScmNil))); expected = ScmApplic (ScmLambdaSimple (["t"; "th"; "el"], ScmIf (ScmVar "t", ScmVar "th", ScmVar "el")),[ScmConst (ScmBoolean true); ScmConst (ScmNumber (ScmRational(36,1)));ScmConst (ScmNumber (ScmRational(36,1)))])};

{name = "RON_CONVERTED_TEST_10"; input = ScmPair (ScmSymbol "let", ScmPair (ScmPair (ScmPair (ScmSymbol "x", ScmPair (ScmString "asd", ScmNil)), ScmNil), ScmPair (ScmPair (ScmSymbol "begin", ScmPair (ScmSymbol "x", ScmNil)), ScmNil))); expected = ScmApplic (ScmLambdaSimple (["x"], ScmVar "x"), [ScmConst (ScmString "asd")])};


{name = "RON_CONVERTED_TEST_23"; input = ScmPair (ScmSymbol "lambda",                                                           ScmPair (ScmPair (ScmSymbol "a", ScmPair (ScmSymbol "b", ScmNil)), ScmPair (ScmSymbol "a", ScmNil)))  ; expected = ScmLambdaSimple (["a"; "b"], ScmVar "a")};

{name = "RON_CONVERTED_TEST_24"; input = ScmPair (ScmSymbol "lambda", ScmPair (ScmPair (ScmSymbol "a", ScmNil), ScmPair (ScmSymbol "a", ScmNil)))  ; expected = ScmLambdaSimple (["a"], ScmVar "a")};

{name = "RON_CONVERTED_TEST_25"; input = ScmPair (ScmSymbol "lambda",                                                           ScmPair (ScmPair (ScmSymbol "x", ScmPair (ScmSymbol "y", ScmNil)),ScmPair (ScmPair (ScmSymbol "+", ScmPair (ScmSymbol "x", ScmPair (ScmSymbol "y", ScmNil))), ScmNil))); expected = ScmLambdaSimple (["x"; "y"], ScmApplic (ScmVar "+", [ScmVar "x"; ScmVar "y"]))};

{name = "RON_CONVERTED_TEST_26"; input = ScmPair (ScmSymbol "lambda",                                                           ScmPair (ScmPair (ScmSymbol "x", ScmPair (ScmSymbol "y", ScmPair (ScmSymbol "z", ScmNil))),ScmPair(ScmPair (ScmSymbol "if",ScmPair (ScmSymbol "x", ScmPair (ScmSymbol "y", ScmPair (ScmSymbol "z", ScmNil)))),ScmNil))); expected = ScmLambdaSimple (["x"; "y"; "z"], ScmIf (ScmVar "x", ScmVar "y", ScmVar "z"))};

{name = "RON_CONVERTED_TEST_27"; input = ScmPair (ScmSymbol "lambda",                                                           ScmPair (ScmPair (ScmSymbol "x", ScmPair (ScmSymbol "y", ScmPair (ScmSymbol "z", ScmNil))),ScmPair(ScmPair (ScmSymbol "begin",ScmPair (ScmSymbol "x", ScmPair (ScmSymbol "y", ScmPair (ScmSymbol "z", ScmNil)))),ScmNil))); expected = ScmLambdaSimple (["x"; "y"; "z"], ScmSeq [ScmVar "x"; ScmVar "y"; ScmVar "z"])};

{name = "RON_CONVERTED_TEST_28"; input = ScmPair (ScmSymbol "lambda",                                                           ScmPair (ScmPair (ScmSymbol "x", ScmPair (ScmSymbol "y", ScmNil)),ScmPair (ScmPair (ScmSymbol "set", ScmPair (ScmSymbol "x", ScmPair (ScmSymbol "y", ScmNil))), ScmNil))); expected = ScmLambdaSimple (["x"; "y"], ScmApplic (ScmVar "set", [ScmVar "x"; ScmVar "y"]))};

{name = "RON_CONVERTED_TEST_29"; input = ScmPair (ScmSymbol "lambda",                                                           ScmPair(ScmPair (ScmSymbol "x",ScmPair (ScmSymbol "y", ScmPair (ScmSymbol "z", ScmPair (ScmSymbol "w", ScmNil)))),ScmPair(ScmPair (ScmSymbol "if",ScmPair (ScmSymbol "x",ScmPair (ScmPair (ScmSymbol "+", ScmPair (ScmSymbol "y", ScmPair (ScmSymbol "z", ScmNil))),ScmPair (ScmPair (ScmSymbol "+", ScmPair (ScmSymbol "z", ScmPair (ScmSymbol "w", ScmNil))), ScmNil)))),ScmNil))); expected = ScmLambdaSimple (["x"; "y"; "z"; "w"],ScmIf (ScmVar "x", ScmApplic (ScmVar "+", [ScmVar "y"; ScmVar "z"]),ScmApplic (ScmVar "+", [ScmVar "z"; ScmVar "w"])))};

{name = "RON_CONVERTED_TEST_30"; input = ScmPair (ScmSymbol "lambda",                                                           ScmPair (ScmPair (ScmSymbol "x", ScmPair (ScmSymbol "y", ScmNil)),ScmPair                                                                             (ScmPair (ScmSymbol "or",                                                               ScmPair (ScmPair (ScmSymbol "x", ScmPair (ScmSymbol "y", ScmPair (ScmSymbol "z", ScmNil))), ScmNil)),    ScmNil))) ; expected = ScmLambdaSimple (["x"; "y"], ScmApplic (ScmVar "x", [ScmVar "y"; ScmVar "z"]))};

{name = "RON_CONVERTED_TEST_31"; input = ScmPair (ScmSymbol "lambda",                                                           ScmPair (ScmPair (ScmSymbol "x", ScmPair (ScmSymbol "y", ScmSymbol "vs")),ScmPair(ScmPair (ScmSymbol "begin",ScmPair (ScmSymbol "x", ScmPair (ScmSymbol "y", ScmPair (ScmSymbol "vs", ScmNil)))),ScmNil))); expected = ScmLambdaOpt (["x"; "y"], "vs", ScmSeq [ScmVar "x"; ScmVar "y"; ScmVar "vs"])};

{name = "RON_CONVERTED_TEST_32"; input = ScmPair (ScmSymbol "lambda",                                                           ScmPair (ScmPair (ScmSymbol "x", ScmSymbol "vs"),ScmPair (ScmPair (ScmSymbol "if", ScmPair (ScmSymbol "x", ScmPair (ScmSymbol "vs", ScmNil))), ScmNil))); expected = ScmLambdaOpt (["x"], "vs", ScmIf (ScmVar "x", ScmVar "vs", ScmConst ScmVoid))};

{name = "RON_CONVERTED_TEST_33"; input = ScmPair (ScmSymbol "lambda",                                                           ScmPair (ScmPair (ScmSymbol "x", ScmPair (ScmSymbol "y", ScmSymbol "vs")),ScmPair(ScmPair (ScmSymbol "and",ScmPair (ScmNumber (ScmRational(55,1)), ScmPair (ScmNumber (ScmRational(55,1)), ScmPair (ScmNumber (ScmRational(55,1)), ScmNil)))),ScmNil))); expected = ScmLambdaOpt (["x"; "y"], "vs",ScmIf (ScmConst (ScmNumber (ScmRational(55,1))),ScmIf (ScmConst (ScmNumber (ScmRational(55,1))), ScmConst (ScmNumber (ScmRational(55,1))),ScmConst (ScmBoolean false)),ScmConst (ScmBoolean false)))};

{name = "RON_CONVERTED_TEST_34"; input = ScmPair (ScmSymbol "lambda",                                                           ScmPair(ScmPair (ScmSymbol "a",ScmPair (ScmSymbol "b", ScmPair (ScmSymbol "c", ScmPair (ScmSymbol "d", ScmSymbol "vs")))),ScmPair(ScmPair (ScmSymbol "if",ScmPair (ScmPair (ScmSymbol "u003e", ScmPair (ScmSymbol "a", ScmPair (ScmSymbol "b", ScmNil))),ScmPair (ScmPair (ScmSymbol "+", ScmPair (ScmSymbol "c", ScmPair (ScmSymbol "d", ScmNil))),ScmPair (ScmPair (ScmSymbol "list", ScmPair (ScmSymbol "vs", ScmNil)), ScmNil)))),ScmNil))); expected = ScmLambdaOpt (["a"; "b"; "c"; "d"], "vs",ScmIf (ScmApplic (ScmVar "u003e", [ScmVar "a"; ScmVar "b"]),ScmApplic (ScmVar "+", [ScmVar "c"; ScmVar "d"]), ScmApplic (ScmVar "list", [ScmVar "vs"])))};

{name = "RON_CONVERTED_TEST_35"; input = ScmPair (ScmSymbol "lambda",                                                           ScmPair (ScmPair (ScmSymbol "b", ScmSymbol "vs"),ScmPair(ScmPair (ScmSymbol "begin",ScmPair (ScmSymbol "b",ScmPair(ScmPair (ScmSymbol "define", ScmPair (ScmSymbol "x", ScmPair (ScmNumber (ScmRational(41,1)), ScmNil))),ScmPair(ScmPair (ScmSymbol "set",ScmPair (ScmSymbol "b",ScmPair(ScmPair (ScmSymbol "+", ScmPair (ScmSymbol "x", ScmPair (ScmNumber (ScmRational(41,1)), ScmNil))),ScmNil))),ScmNil)))),ScmNil))); expected = ScmLambdaOpt (["b"], "vs",ScmSeq[ScmVar "b"; ScmDef (ScmVar "x", ScmConst (ScmNumber (ScmRational(41,1))));ScmApplic (ScmVar "set",[ScmVar "b"; ScmApplic (ScmVar "+", [ScmVar "x"; ScmConst (ScmNumber (ScmRational(41,1)))])])])};

{name = "RON_CONVERTED_TEST_36"; input = ScmPair (ScmSymbol "lambda",                                                           ScmPair (ScmPair (ScmSymbol "a", ScmPair (ScmSymbol "b", ScmSymbol "vs")),ScmPair(ScmPair (ScmSymbol "cond",ScmPair (ScmPair (ScmSymbol "a", ScmPair (ScmNumber (ScmRational(30,1)), ScmNil)),ScmPair (ScmPair (ScmSymbol "b", ScmPair (ScmNumber (ScmRational(30,1)), ScmNil)),ScmPair(ScmPair (ScmSymbol "else",ScmPair (ScmPair (ScmSymbol "+", ScmPair (ScmSymbol "a", ScmPair (ScmSymbol "b", ScmNil))),ScmNil)),ScmNil)))),ScmNil))); expected = ScmLambdaOpt (["a"; "b"], "vs",ScmIf (ScmVar "a", ScmConst (ScmNumber (ScmRational(30,1))),ScmIf (ScmVar "b", ScmConst (ScmNumber (ScmRational(30,1))),ScmApplic (ScmVar "+", [ScmVar "a"; ScmVar "b"]))))};

{name = "RON_CONVERTED_TEST_37"; input = ScmPair (ScmSymbol "lambda",                                                           ScmPair (ScmPair (ScmSymbol "x", ScmSymbol "vs"), ScmPair (ScmSymbol "vs", ScmNil)))   ; expected = ScmLambdaOpt (["x"], "vs", ScmVar "vs")};

{name = "RON_CONVERTED_TEST_39"; input = ScmPair (ScmSymbol "lambda",                                                           ScmPair (ScmPair (ScmSymbol "x", ScmPair (ScmSymbol "y", ScmSymbol "vs")),ScmPair(ScmPair (ScmSymbol "and",ScmPair (ScmSymbol "x", ScmPair (ScmSymbol "y", ScmPair (ScmSymbol "vs", ScmNil)))),ScmNil))); expected = ScmLambdaOpt (["x"; "y"], "vs",ScmIf (ScmVar "x", ScmIf (ScmVar "y", ScmVar "vs", ScmConst (ScmBoolean false)),ScmConst (ScmBoolean false)))};

{name = "RON_CONVERTED_TEST_40"; input = ScmPair (ScmSymbol "let*",                                                             ScmPair(ScmPair (ScmPair (ScmSymbol "x", ScmPair (ScmNumber (ScmRational(42,1)), ScmNil)),ScmPair (ScmPair (ScmSymbol "y", ScmPair (ScmNumber (ScmRational(42,1)), ScmNil)), ScmNil)),ScmPair (ScmSymbol "y", ScmNil))); expected = ScmApplic(ScmLambdaSimple (["x"],ScmApplic (ScmLambdaSimple (["y"], ScmVar "y"), [ScmConst (ScmNumber (ScmRational(42,1)))])),[ScmConst (ScmNumber (ScmRational(42,1)))])};

{name = "RON_CONVERTED_TEST_41"; input = ScmPair (ScmSymbol "let*",                                                             ScmPair(ScmPair (ScmPair (ScmSymbol "x", ScmPair (ScmNumber (ScmRational(58,1)), ScmNil)),ScmPair (ScmPair (ScmSymbol "y", ScmPair (ScmNumber (ScmRational(58,1)), ScmNil)),ScmPair (ScmPair (ScmSymbol "z", ScmPair (ScmNumber (ScmRational(58,1)), ScmNil)),ScmPair (ScmPair (ScmSymbol "a", ScmPair (ScmNumber (ScmRational(58,1)), ScmNil)),ScmPair (ScmPair (ScmSymbol "b", ScmPair (ScmNumber (ScmRational(58,1)), ScmNil)),ScmPair (ScmPair (ScmSymbol "c", ScmPair (ScmNumber (ScmRational(58,1)), ScmNil)), ScmNil)))))),ScmPair(ScmPair (ScmSymbol "begin",ScmPair (ScmSymbol "x",ScmPair (ScmSymbol "y",ScmPair (ScmSymbol "z",ScmPair (ScmSymbol "a", ScmPair (ScmSymbol "b", ScmPair (ScmSymbol "c", ScmNil))))))),ScmNil))); expected = ScmApplic(ScmLambdaSimple (["x"],ScmApplic(ScmLambdaSimple (["y"],ScmApplic(ScmLambdaSimple (["z"],ScmApplic(ScmLambdaSimple (["a"],ScmApplic(ScmLambdaSimple (["b"],ScmApplic(ScmLambdaSimple (["c"],ScmSeq [ScmVar "x"; ScmVar "y"; ScmVar "z"; ScmVar "a"; ScmVar "b"; ScmVar "c"]),[ScmConst (ScmNumber (ScmRational(58,1)))])),[ScmConst (ScmNumber (ScmRational(58,1)))])),[ScmConst (ScmNumber (ScmRational(58,1)))])),[ScmConst (ScmNumber (ScmRational(58,1)))])),[ScmConst (ScmNumber (ScmRational(58,1)))])),[ScmConst (ScmNumber (ScmRational(58,1)))])};

{name = "RON_CONVERTED_TEST_42"; input = ScmPair (ScmSymbol "let*",                                                             ScmPair(ScmPair (ScmPair (ScmSymbol "a", ScmPair (ScmNumber (ScmRational(91,1)), ScmNil)),ScmPair (ScmPair (ScmSymbol "b", ScmPair (ScmNumber (ScmRational(91,1)), ScmNil)),ScmPair (ScmPair (ScmSymbol "c", ScmPair (ScmNumber (ScmRational(91,1)), ScmNil)),ScmPair (ScmPair (ScmSymbol "d", ScmPair (ScmNumber (ScmRational(91,1)), ScmNil)),ScmPair (ScmPair (ScmSymbol "e", ScmPair (ScmNumber (ScmRational(91,1)), ScmNil)),ScmPair (ScmPair (ScmSymbol "f", ScmPair (ScmNumber (ScmRational(91,1)), ScmNil)),ScmPair (ScmPair (ScmSymbol "g", ScmPair (ScmNumber (ScmRational(91,1)), ScmNil)), ScmNil))))))),ScmPair(ScmPair (ScmSymbol "and",ScmPair (ScmSymbol "a",ScmPair (ScmSymbol "b",ScmPair (ScmSymbol "c",ScmPair (ScmSymbol "d",ScmPair (ScmSymbol "e", ScmPair (ScmSymbol "f", ScmPair (ScmSymbol "g", ScmNil)))))))),ScmNil))); expected = ScmApplic(ScmLambdaSimple (["a"],ScmApplic(ScmLambdaSimple (["b"],ScmApplic(ScmLambdaSimple (["c"],ScmApplic(ScmLambdaSimple (["d"],ScmApplic(ScmLambdaSimple (["e"],ScmApplic(ScmLambdaSimple (["f"],ScmApplic(ScmLambdaSimple (["g"],ScmIf (ScmVar "a",ScmIf (ScmVar "b",ScmIf (ScmVar "c",ScmIf (ScmVar "d",ScmIf (ScmVar "e",ScmIf (ScmVar "f", ScmVar "g", ScmConst (ScmBoolean false)),ScmConst (ScmBoolean false)),ScmConst (ScmBoolean false)),ScmConst (ScmBoolean false)),ScmConst (ScmBoolean false)),ScmConst (ScmBoolean false))),[ScmConst (ScmNumber (ScmRational(91,1)))])),[ScmConst (ScmNumber (ScmRational(91,1)))])),[ScmConst (ScmNumber (ScmRational(91,1)))])),[ScmConst (ScmNumber (ScmRational(91,1)))])),[ScmConst (ScmNumber (ScmRational(91,1)))])),[ScmConst (ScmNumber (ScmRational(91,1)))])),[ScmConst (ScmNumber (ScmRational(91,1)))])};

{name = "RON_CONVERTED_TEST_43"; input = ScmPair (ScmSymbol "let*",                                                             ScmPair (ScmNil,ScmPair(ScmPair (ScmSymbol "begin",ScmPair (ScmNumber (ScmRational(104,1)), ScmPair (ScmNumber (ScmRational(104,1)), ScmPair (ScmNumber (ScmRational(104,1)), ScmNil)))),ScmNil))); expected = ScmApplic(ScmLambdaSimple ([],ScmSeq[ScmConst (ScmNumber (ScmRational(104,1))); ScmConst (ScmNumber (ScmRational(104,1)));ScmConst (ScmNumber (ScmRational(104,1)))]),[])};

{name = "RON_CONVERTED_TEST_44"; input = ScmPair (ScmSymbol "let*",                                                             ScmPair(ScmPair (ScmPair (ScmSymbol "a", ScmPair (ScmNumber (ScmRational(92,1)), ScmNil)),ScmPair (ScmPair (ScmSymbol "b", ScmPair (ScmNumber (ScmRational(92,1)), ScmNil)), ScmNil)),ScmPair (ScmPair (ScmSymbol "+", ScmPair (ScmSymbol "a", ScmPair (ScmSymbol "b", ScmNil))), ScmNil))); expected = ScmApplic(ScmLambdaSimple (["a"],ScmApplic (ScmLambdaSimple (["b"], ScmApplic (ScmVar "+", [ScmVar "a"; ScmVar "b"])),[ScmConst (ScmNumber (ScmRational(92,1)))])),[ScmConst (ScmNumber (ScmRational(92,1)))])};

{name = "RON_CONVERTED_TEST_45"; input = ScmPair (ScmSymbol "let*",                                                             ScmPair (ScmPair (ScmPair (ScmSymbol "x", ScmPair (ScmChar 'x', ScmNil)), ScmNil),ScmPair (ScmSymbol "x", ScmNil))); expected = ScmApplic (ScmLambdaSimple (["x"], ScmVar "x"), [ScmConst (ScmChar 'x')])};

{name = "RON_CONVERTED_TEST_46"; input = ScmPair (ScmSymbol "let*",                                                             ScmPair(ScmPair (ScmPair (ScmSymbol "t", ScmPair (ScmBoolean true, ScmNil)),ScmPair (ScmPair (ScmSymbol "th", ScmPair (ScmNumber (ScmRational(40,1)), ScmNil)),ScmPair (ScmPair (ScmSymbol "el", ScmPair (ScmNumber (ScmRational(40,1)), ScmNil)), ScmNil))),ScmPair(ScmPair (ScmSymbol "if",ScmPair (ScmBoolean true, ScmPair (ScmNumber (ScmRational(40,1)), ScmPair (ScmNumber (ScmRational(40,1)), ScmNil)))),ScmNil))); expected = ScmApplic(ScmLambdaSimple (["t"],ScmApplic(ScmLambdaSimple (["th"],ScmApplic(ScmLambdaSimple (["el"],ScmIf (ScmConst (ScmBoolean true), ScmConst (ScmNumber (ScmRational(40,1))),ScmConst (ScmNumber (ScmRational(40,1))))),[ScmConst (ScmNumber (ScmRational(40,1)))])),[ScmConst (ScmNumber (ScmRational(40,1)))])),[ScmConst (ScmBoolean true)])};



{name = "RON_CONVERTED_TEST_47"; input = ScmPair (ScmSymbol "let*",                                                             ScmPair (ScmPair (ScmPair (ScmSymbol "x", ScmPair (ScmString "asd", ScmNil)), ScmNil),ScmPair(ScmPair (ScmSymbol "define", ScmPair (ScmSymbol "y", ScmPair (ScmNumber (ScmRational (12,1)), ScmNil))),ScmNil))); expected = ScmApplic(ScmLambdaSimple (["x"], ScmDef (ScmVar "y", ScmConst (ScmNumber (ScmRational (12,1))))),[ScmConst (ScmString "asd")])};

{name = "RON_CONVERTED_TEST_48"; input = ScmPair (ScmSymbol "let*",                                                             ScmPair (ScmPair (ScmPair (ScmSymbol "x", ScmPair (ScmString "asd", ScmNil)), ScmNil),ScmPair(ScmPair (ScmSymbol "begin",ScmPair(ScmPair (ScmSymbol "define",ScmPair (ScmSymbol "y", ScmPair (ScmNumber (ScmRational(12,1)), ScmNil))),ScmPair(ScmPair (ScmSymbol "set", ScmPair (ScmSymbol "y", ScmPair (ScmNumber (ScmRational (12,1)), ScmNil))),ScmNil))),ScmNil))); expected = ScmApplic(ScmLambdaSimple (["x"],ScmSeq[ScmDef (ScmVar "y", ScmConst (ScmNumber (ScmRational(12,1))));ScmApplic (ScmVar "set", [ScmVar "y"; ScmConst (ScmNumber (ScmRational(12,1)))])]),[ScmConst (ScmString "asd")])};

{name = "RON_CONVERTED_TEST_49"; input = ScmPair (ScmSymbol "let*",                                                             ScmPair (ScmPair (ScmPair (ScmSymbol "x", ScmPair (ScmString "asd", ScmNil)), ScmNil),ScmPair (ScmPair (ScmSymbol "begin", ScmPair (ScmSymbol "x", ScmNil)), ScmNil))); expected = ScmApplic (ScmLambdaSimple (["x"], ScmVar "x"), [ScmConst (ScmString "asd")])};

{name = "RON_CONVERTED_TEST_50"; input = ScmPair (ScmSymbol "cond",                                                             ScmPair(ScmPair (ScmNumber (ScmRational(28,1)), ScmPair (ScmNumber (ScmRational(28,1)), ScmPair (ScmNumber (ScmRational(28,1)), ScmNil))),ScmPair(ScmPair (ScmNumber (ScmRational(28,1)), ScmPair (ScmNumber (ScmRational(28,1)), ScmPair (ScmNumber (ScmRational(28,1)), ScmNil))),ScmNil))); expected = ScmIf (ScmConst (ScmNumber (ScmRational(28,1))),ScmSeq [ScmConst (ScmNumber (ScmRational(28,1))); ScmConst (ScmNumber (ScmRational(28,1)))],ScmIf (ScmConst (ScmNumber (ScmRational(28,1))),ScmSeq [ScmConst (ScmNumber (ScmRational(28,1))); ScmConst (ScmNumber (ScmRational(28,1)))],ScmConst ScmVoid))};

{name = "RON_CONVERTED_TEST_51"; input = ScmPair (ScmSymbol "cond",                                                             ScmPair(ScmPair (ScmNumber (ScmRational(116,1)), ScmPair (ScmNumber (ScmRational(116,1)), ScmPair (ScmNumber (ScmRational(116,1)), ScmNil))),ScmPair(ScmPair (ScmNumber (ScmRational(116,1)), ScmPair (ScmNumber (ScmRational(116,1)), ScmPair (ScmNumber (ScmRational(116,1)), ScmNil))),ScmPair(ScmPair (ScmSymbol "else",ScmPair (ScmNumber (ScmRational(116,1)), ScmPair (ScmNumber (ScmRational(116,1)), ScmPair (ScmNumber (ScmRational(116,1)), ScmNil)))),ScmNil)))); expected = ScmIf (ScmConst (ScmNumber (ScmRational(116,1))),ScmSeq [ScmConst (ScmNumber (ScmRational(116,1))); ScmConst (ScmNumber (ScmRational(116,1)))],ScmIf (ScmConst (ScmNumber (ScmRational(116,1))),ScmSeq [ScmConst (ScmNumber (ScmRational(116,1))); ScmConst (ScmNumber (ScmRational(116,1)))],ScmSeq[ScmConst (ScmNumber (ScmRational(116,1))); ScmConst (ScmNumber (ScmRational(116,1)));ScmConst (ScmNumber (ScmRational(116,1)))]))};

{name = "RON_CONVERTED_TEST_52"; input = ScmPair (ScmSymbol "cond",                                                             ScmPair(ScmPair (ScmNumber (ScmRational(83,1)), ScmPair (ScmNumber (ScmRational(83,1)), ScmPair (ScmNumber (ScmRational(83,1)), ScmNil))),ScmPair(ScmPair (ScmSymbol "else",ScmPair (ScmNumber (ScmRational(83,1)), ScmPair (ScmNumber (ScmRational(83,1)), ScmPair (ScmNumber (ScmRational(83,1)), ScmNil)))),ScmPair(ScmPair (ScmNumber (ScmRational(83,1)), ScmPair (ScmNumber (ScmRational(83,1)), ScmPair (ScmNumber (ScmRational(83,1)), ScmNil))),ScmNil)))); expected = ScmIf (ScmConst (ScmNumber (ScmRational(83,1))),ScmSeq [ScmConst (ScmNumber (ScmRational(83,1))); ScmConst (ScmNumber (ScmRational(83,1)))],ScmSeq[ScmConst (ScmNumber (ScmRational(83,1))); ScmConst (ScmNumber (ScmRational(83,1)));ScmConst (ScmNumber (ScmRational(83,1)))])};


{name = "RON_CONVERTED_TEST_55"; input = ScmPair (ScmSymbol "and",                                                              ScmPair (ScmNumber (ScmRational(101,1)),ScmPair (ScmNumber (ScmRational(101,1)),ScmPair (ScmNumber (ScmRational(101,1)),ScmPair (ScmNumber (ScmRational(101,1)),ScmPair (ScmNumber (ScmRational(101,1)),ScmPair (ScmNumber (ScmRational(101,1)),ScmPair (ScmNumber (ScmRational(101,1)),ScmPair (ScmNumber (ScmRational(101,1)),ScmPair (ScmNumber (ScmRational(101,1)), ScmPair (ScmNumber (ScmRational(101,1)), ScmNil))))))))))); expected = ScmIf (ScmConst (ScmNumber (ScmRational(101,1))),ScmIf (ScmConst (ScmNumber (ScmRational(101,1))),ScmIf (ScmConst (ScmNumber (ScmRational(101,1))),ScmIf (ScmConst (ScmNumber (ScmRational(101,1))),ScmIf (ScmConst (ScmNumber (ScmRational(101,1))),ScmIf (ScmConst (ScmNumber (ScmRational(101,1))),ScmIf (ScmConst (ScmNumber (ScmRational(101,1))),ScmIf (ScmConst (ScmNumber (ScmRational(101,1))),ScmIf (ScmConst (ScmNumber (ScmRational(101,1))), ScmConst (ScmNumber (ScmRational(101,1))),ScmConst (ScmBoolean false)),ScmConst (ScmBoolean false)),ScmConst (ScmBoolean false)),ScmConst (ScmBoolean false)),ScmConst (ScmBoolean false)),ScmConst (ScmBoolean false)),ScmConst (ScmBoolean false)),ScmConst (ScmBoolean false)),ScmConst (ScmBoolean false))};


{name = "RON_CONVERTED_TEST_70"; input = ScmPair (ScmSymbol "define",ScmPair (ScmPair (ScmSymbol "square", ScmPair (ScmSymbol "x", ScmNil)),ScmPair (ScmPair (ScmSymbol "*", ScmPair (ScmSymbol "x", ScmPair (ScmSymbol "x", ScmNil))), ScmNil))); expected = ScmDef (ScmVar "square",ScmLambdaSimple (["x"], ScmApplic (ScmVar "*", [ScmVar "x"; ScmVar "x"])))};


{name = "RON_CONVERTED_TEST_73"; input = ScmPair (ScmSymbol "define",ScmPair(ScmPair (ScmSymbol "square",ScmPair (ScmSymbol "a", ScmPair (ScmSymbol "b", ScmPair (ScmSymbol "c", ScmNil)))),ScmPair(ScmPair (ScmSymbol "*",ScmPair (ScmSymbol "a", ScmPair (ScmSymbol "b", ScmPair (ScmSymbol "c", ScmNil)))),ScmNil))); expected = ScmDef (ScmVar "square",ScmLambdaSimple (["a"; "b"; "c"],ScmApplic (ScmVar "*", [ScmVar "a"; ScmVar "b"; ScmVar "c"])))};




{name = "RON_CONVERTED_TEST_96"; input = ScmPair (ScmSymbol "define",ScmPair(ScmPair (ScmSymbol "applic",ScmPair (ScmSymbol "fun",ScmPair (ScmSymbol "a",ScmPair (ScmSymbol "b",ScmPair (ScmSymbol "c", ScmPair (ScmSymbol "d", ScmPair (ScmSymbol "e", ScmNil))))))),ScmPair(ScmPair (ScmSymbol "fun",ScmPair (ScmSymbol "a",ScmPair (ScmSymbol "b",ScmPair (ScmSymbol "c", ScmPair (ScmSymbol "d", ScmPair (ScmSymbol "e", ScmNil)))))),ScmNil))); expected = ScmDef (ScmVar "applic",ScmLambdaSimple (["fun"; "a"; "b"; "c"; "d"; "e"],ScmApplic (ScmVar "fun", [ScmVar "a"; ScmVar "b"; ScmVar "c"; ScmVar "d"; ScmVar "e"])))};

{name = "RON_CONVERTED_TEST_97"; input = ScmPair (ScmSymbol "define",ScmPair(ScmPair (ScmSymbol "if_fun",ScmPair (ScmSymbol "if_test",ScmPair (ScmSymbol "if_then", ScmPair (ScmSymbol "if_else", ScmNil)))),ScmPair(ScmPair (ScmSymbol "if",ScmPair (ScmSymbol "if_test",ScmPair (ScmSymbol "if_then", ScmPair (ScmSymbol "if_else", ScmNil)))),ScmNil))); expected = ScmDef (ScmVar "if_fun",ScmLambdaSimple (["if_test"; "if_then"; "if_else"],ScmIf (ScmVar "if_test", ScmVar "if_then", ScmVar "if_else")))};

{name = "RON_CONVERTED_TEST_98"; input = ScmPair (ScmSymbol "define",ScmPair (ScmPair (ScmSymbol "pairing", ScmPair (ScmSymbol "a", ScmPair (ScmSymbol "b", ScmNil))),ScmPair(ScmPair (ScmSymbol "quote",ScmPair (ScmPair (ScmSymbol "a", ScmPair (ScmSymbol "b", ScmNil)), ScmNil)),ScmNil))); expected = ScmDef (ScmVar "pairing",ScmLambdaSimple (["a"; "b"],ScmConst (ScmPair (ScmSymbol "a", ScmPair (ScmSymbol "b", ScmNil)))))};


{name = "RON_CONVERTED_TEST_86"; input = ScmPair (ScmString "should not", ScmPair (ScmString "be", ScmPair (ScmString "list", ScmNil))); expected = ScmApplic (ScmConst (ScmString "should not"),[ScmConst (ScmString "be"); ScmConst (ScmString "list")])};

{name = "RON_CONVERTED_TEST_87"; input = ScmPair (ScmSymbol "quote",ScmPair (ScmPair (ScmString "should", ScmPair (ScmString "be", ScmString "list")), ScmNil)); expected = ScmConst (ScmPair (ScmString "should", ScmPair (ScmString "be", ScmString "list")))};

{name = "RON_CONVERTED_TEST_88"; input = ScmPair (ScmSymbol "quote",ScmPair(ScmPair (ScmString "vary",ScmPair (ScmString "long",ScmPair (ScmNumber (ScmRational(103,1)),ScmPair (ScmNumber (ScmReal(103.3)),ScmPair (ScmNumber (ScmReal (-4.2)),ScmPair (ScmString "complex", ScmPair (ScmChar 'x', ScmPair (ScmString "list", ScmNil)))))))),ScmNil)); expected = ScmConst(ScmPair (ScmString "vary",ScmPair (ScmString "long",ScmPair (ScmNumber (ScmRational(103,1)),ScmPair (ScmNumber (ScmReal(103.3)),ScmPair (ScmNumber (ScmReal (-4.2)),ScmPair (ScmString "complex",ScmPair (ScmChar 'x', ScmPair (ScmString "list", ScmNil)))))))))};

{name = "RON_CONVERTED_TEST_89"; input = ScmPair (ScmSymbol "quote",ScmPair(ScmPair (ScmSymbol "a",ScmPair (ScmSymbol "b",ScmPair (ScmSymbol "c", ScmPair (ScmSymbol "d", ScmPair (ScmSymbol "f", ScmSymbol "g"))))),ScmNil)); expected = ScmConst(ScmPair (ScmSymbol "a",ScmPair (ScmSymbol "b",ScmPair (ScmSymbol "c", ScmPair (ScmSymbol "d", ScmPair (ScmSymbol "f", ScmSymbol "g"))))))};

{name = "RON_CONVERTED_TEST_90"; input = ScmPair (ScmSymbol "quote",ScmPair(ScmPair (ScmString "a long long string",ScmPair (ScmString "another long one",ScmPair(ScmPair (ScmString "some numbers",ScmPair (ScmNumber (ScmRational(30,1)), ScmPair (ScmNumber (ScmRational(30,1)), ScmNumber (ScmRational(30,1))))),ScmPair (ScmString "Named ScmChar", ScmChar 'x')))),ScmNil)); expected = ScmConst(ScmPair (ScmString "a long long string",ScmPair (ScmString "another long one",ScmPair(ScmPair (ScmString "some numbers",ScmPair (ScmNumber (ScmRational(30,1)), ScmPair (ScmNumber (ScmRational(30,1)), ScmNumber (ScmRational(30,1))))),ScmPair (ScmString "Named ScmChar", ScmChar 'x')))))};

{name = "RON_CONVERTED_TEST_91"; input = ScmPair (ScmSymbol "quote",ScmPair(ScmPair (ScmNumber (ScmReal (-0.2)),ScmPair (ScmNumber (ScmReal(42.3)),ScmPair(ScmPair (ScmNumber (ScmRational(42,1)),ScmPair (ScmNumber (ScmRational(42,1)), ScmPair (ScmNumber (ScmRational(42,1)), ScmNil))),ScmPair (ScmPair (ScmNumber (ScmRational(42,1)), ScmNumber (ScmRational(42,1))),ScmPair (ScmPair (ScmSymbol "a", ScmPair (ScmSymbol "b", ScmSymbol "c")),ScmPair (ScmSymbol "d", ScmSymbol "f")))))),ScmNil)); expected = ScmConst(ScmPair (ScmNumber (ScmReal (-0.2)),ScmPair (ScmNumber (ScmReal(42.3)),ScmPair(ScmPair (ScmNumber (ScmRational(42,1)),ScmPair (ScmNumber (ScmRational(42,1)), ScmPair (ScmNumber (ScmRational(42,1)), ScmNil))),ScmPair (ScmPair (ScmNumber (ScmRational(42,1)), ScmNumber (ScmRational(42,1))),ScmPair (ScmPair (ScmSymbol "a", ScmPair (ScmSymbol "b", ScmSymbol "c")),ScmPair (ScmSymbol "d", ScmSymbol "f")))))))};

{name = "RON_CONVERTED_TEST_92"; input = ScmPair (ScmSymbol "quote",ScmPair(ScmPair (ScmNumber (ScmReal(42.3)),ScmPair (ScmNumber (ScmReal (-0.2)),ScmPair (ScmNumber (ScmReal(42.3)),ScmPair (ScmNumber (ScmRational(42,1)),ScmPair (ScmNumber (ScmReal(42.3)), ScmPair (ScmNumber (ScmRational(42,1)), ScmNumber (ScmRational(42,1)))))))),ScmNil)); expected = ScmConst(ScmPair (ScmNumber (ScmReal(42.3)),ScmPair (ScmNumber (ScmReal (-0.2)),ScmPair (ScmNumber (ScmReal(42.3)),ScmPair (ScmNumber (ScmRational(42,1)),ScmPair (ScmNumber (ScmReal(42.3)), ScmPair (ScmNumber (ScmRational(42,1)), ScmNumber (ScmRational(42,1)))))))))};

{name = "RON_CONVERTED_TEST_93"; input = ScmPair (ScmSymbol "quote",ScmPair(ScmPair (ScmNumber (ScmRational(42,1)),ScmPair (ScmPair (ScmNumber (ScmRational(42,1)), ScmPair (ScmNumber (ScmRational(42,1)), ScmNil)),ScmPair (ScmPair (ScmNumber (ScmRational(42,1)), ScmPair (ScmNumber (ScmReal(42.3)), ScmNil)),ScmPair(ScmPair (ScmSymbol "c",ScmPair (ScmSymbol "d",ScmPair (ScmPair (ScmSymbol "f", ScmSymbol "g"), ScmString "Hello World"))),ScmSymbol "z")))),ScmNil)); expected = ScmConst(ScmPair (ScmNumber (ScmRational(42,1)),ScmPair (ScmPair (ScmNumber (ScmRational(42,1)), ScmPair (ScmNumber (ScmRational(42,1)), ScmNil)),ScmPair (ScmPair (ScmNumber (ScmRational(42,1)), ScmPair (ScmNumber (ScmReal(42.3)), ScmNil)),ScmPair(ScmPair (ScmSymbol "c",ScmPair (ScmSymbol "d",ScmPair (ScmPair (ScmSymbol "f", ScmSymbol "g"), ScmString "Hello World"))),ScmSymbol "z")))))};

{name = "RON_CONVERTED_TEST_94"; input = ScmString ""; expected = ScmConst (ScmString "")};
];;



let test_case case =
try
let actual = Tag_Parser.tag_parse_expression case.input in
if (expr_eq actual case.expected) then "PASS" else "FAILURE"
with
| X_syntax_error(s, msg) -> Printf.sprintf "Exception: Syntax Error message: %s for sexpr: %s" msg (string_of_sexpr s)
| X_reserved_word(s) -> Printf.sprintf "Exception: Reserved Word: %s" s
| X_not_implemented -> Printf.sprintf "Exception: Syntax not yet implemented"
| _ -> "Unknown Failure"

let test_cases cases =
let names, results =  (List.map (fun case -> case.name) cases),(List.map test_case cases) in
List.map2 (fun name result -> Printf.sprintf "%s: %s" result name) names results;;

List.map (Printf.printf "%s\n") (test_cases cases);;
